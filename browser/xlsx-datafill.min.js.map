{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/XlsxDataFill.js","src/XlsxPopulateAccess.js"],"names":["f","exports","module","define","amd","window","global","self","this","XlsxDataFill","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","_2","defaultOpts","templateRegExp","RegExp","fieldSplitter","joinText","callbacksMap","","data","keys","accessor","opts","_classCallCheck","_opts","defaultsDeep","_rowSizes","_colSizes","_access","newOpts","merge","_this","dataFills","collectTemplates","template","aFill","dependents","processed","reference","refFill","concat","push","offset","cellDistance","cell","cellRef","each","fill","applyFill","handlerName","handlerFn","extractor","extractParts","split","path","handler","getHandler","_this2","styles","pair","startsWith","name","substr","val","extractValues","setStyle","reMatch","cellValue","match","parts","map","trim","buildRef","iterators","cellSize","padding","v","parseInt","s","cb","_this3","allTemplates","forAllCells","parseTemplate","sort","b","forEach","root","_this4","_this$parseExtractor","parseExtractor","Array","isArray","undefined","sizes","entry","join","get","idx","_this5","iter","transposed","parsedIter","inRoot","extractData","_typeof","values","unshift","_this6","entrySize","value","chunk","getCellRange","ri","ci","setValue","copyStyle","copySize","applyDataStyle","mainCell","_this7","theData","nextCell","sizeMaxxer","Math","max","d","inFill","inCell","offsetCell","innerSize","putValues","rowOffset","colOffset","rng","setRangeMerged","XlsxPopulateAccess","_","_RichText","workbook","XlsxPopulate","_workbook","RichText","theValue","text","from","to","rowNumber","columnNumber","cellAddr","address","theSize","sheet","_mergeCells","range","rangeAddr","attributes","ref","includeSheetName","adr","sheetId","activeSheet","rangeTo","relativeCell","rows","cols","status","merged","sheets","usedRange","dest","src","_style","style","_styleId","row","col","height","column","width"],"mappings":"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","file":"xlsx-datafill.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\"use strict\";\n\nconst _ = require('lodash');\n\nconst defaultOpts = {\n    templateRegExp: new RegExp(/\\{\\{([^}]*)\\}\\}/),\n    fieldSplitter: \"|\",\n    joinText: \",\",\n    callbacksMap: {\n        \"\": data => _.keys(data)\n    }\n};\n\n/**\n * Data fill engine, taking an instance of Excel sheet accessor and a JSON object as data, and filling the values from the latter into the former.\n */\nclass XlsxDataFill {\n    /**\n     * Constructs a new instance of XlsxDataFill with given options.\n     * @param {object} accessor An instance of XLSX spreadsheet accessing class.\n     * @param {{}} opts Options to be used during processing.\n     * @param {RegExp} opts.templateRegExp The regular expression to be used for template recognizing. \n     * Default is `/\\{\\{([^}]*)\\}\\}/`, i.e. Mustache.\n     * @param {string} opts.fieldSplitter The string to be expected as template field splitter. Default is `|`.\n     * @param {string} opts.joinText The string to be used when the extracted value for a single cell is an array, \n     * and it needs to be joined. Default is `,`.\n     * @param {object.<string, function>} opts.callbacksMap A map of handlers to be used for data and value extraction.\n     * There is one default - the empty one, for object key extraction.\n     */\n    constructor(accessor, opts) {\n        this._opts = _.defaultsDeep({}, opts, defaultOpts);\n        this._rowSizes = {};\n        this._colSizes = {};\n        this._access = accessor;\n    }\n\n    /**\n     * Setter/getter for XlsxDataFill's options as set during construction.\n     * @param {{}|null} newOpts If set - the new options to be used. \n     * @see {@constructor}.\n     * @returns {XlsxDataFill|{}} The required options (in getter mode) or XlsxDataFill (in setter mode) for chaining.\n     */\n    options(newOpts) {\n        if (newOpts !== null) {\n            _.merge(this._opts, newOpts);\n            return this;\n        } else\n            return this._opts;\n    }\n\n    /**\n     * The main entry point for whole data population mechanism.\n     * @param {{}} data The data to be applied.\n     * @returns {XlsxDataFill} For invocation chaining.\n     */\n    fillData(data) {\n        const dataFills = {};\n\t\n        // Build the dependency connections between templates.\n        this.collectTemplates(template => {\n            const aFill = {  \n                template: template, \n                dependents: [],\n                processed: false\n            };\n    \n            if (template.reference) {\n                const refFill = dataFills[template.reference];\n                if (!refFill)\n                    throw new Error(`Unable to find a reference '${template.reference}'!`);\n                \n                refFill.dependents.push(aFill);\n                aFill.offset = this._access.cellDistance(refFill.template.cell, template.cell);\n            }\n    \n            dataFills[this._access.cellRef(template.cell)] = aFill;\n        });\n    \n        // Apply each fill onto the sheet.\n        _.each(dataFills, fill => {\n            if (!fill.processed)\n                this.applyFill(fill, data, fill.template.cell);\n        });\n\n        return this;\n    }\n\n    /**\n     * Retrieves the provided handler from the map.\n     * @param {string} handlerName The name of the handler.\n     * @returns {function} The handler function itself.\n     * @ignore\n     */\n    getHandler(handlerName) {\n        const handlerFn = this._opts.callbacksMap[handlerName];\n\n        if (!handlerFn)\n            throw new Error(`Handler '${handlerName}' cannot be found!`);\n        else if (typeof handlerFn !== 'function')\n            throw new Error(`Handler '${handlerName}' is not a function!`);\n        else \n            return handlerFn;\n    }\n\n    /**\n     * Parses the provided extractor (ot iterator) string to find a callback id inside, if present.\n     * @param {string} extractor The iterator/extractor string to be investigated.\n     * @returns {object.<string, function>} A { `path`, `handler` } object representing the JSON path\n     * ready for use and the provided `handler` _function_ - ready for invoking, if such is provided.\n     * If not - the `path` property contains the provided `extractor`, and the `handler` is `null`.\n     * @ignore\n     */\n    parseExtractor(extractor) {\n        // A specific extractor can be specified after semilon - find and remember it.\n        const extractParts = extractor.split(\":\"),\n            handlerName = extractParts[1];\n\n        return extractParts.length == 1\n            ? { path: extractor, handler: null }\n            : {\n                path: extractParts[0],\n                handler: this.getHandler(handlerName)\n            };\n    }\n\n    /**\n     * Applies the style part of the template onto a given cell.\n     * @param {Cell} cell The destination cell to apply styling to.\n     * @param {{}} data The data chunk for that cell.\n     * @param {{}} template The template to be used for that cell.\n     * @returns {DataFiller} For invocation chaining.\n     * @ignore\n     */\n    applyDataStyle(cell, data, template) {\n        const styles = template.styles;\n        \n        if (styles && data) {\n            _.each(styles, pair => {\n                if (_.startsWith(pair.name, \":\")) {\n                    this.getHandler(pair.name.substr(1)).call(this._opts, data, cell);\n                } else {\n                    const val = this.extractValues(data, pair.extractor, cell);\n                    if (val)\n                        this._access.setStyle(cell, pair.name, val);\n                }\n            });\n        }\n\n        return this;\n    }\n\n    /**\n     * Parses the contents of the cell into a valid template info.\n     * @param {Cell} cell The cell containing the template to be parsed.\n     * @returns {{}} The parsed template.\n     * @description This method builds template info, taking into account the supplied options.\n     * @ignore\n     */\n    parseTemplate(cell) {\n        // The options are in `this` argument.\n        const reMatch = (this._access.cellValue(cell) || '').match(this._opts.templateRegExp);\n        \n        if (!reMatch) return null;\n    \n        const parts = reMatch[1].split(this._opts.fieldSplitter).map(_.trim),\n            styles = !parts[4] ? null : parts[4].split(\",\");\n        \n        if (parts.length < 2) \n            throw new Error(`Not enough components of the template ${reMatch[0]}`);\n\n        return {\n            reference: this._access.buildRef(cell, parts[0]),\n            iterators: parts[1].split(/x|\\*/).map(_.trim),\n            extractor: parts[2] || \"\",\n            cell: cell,\n            cellSize: this._access.cellSize(cell),\n            padding: (parts[3] || \"\").split(/:|,|x|\\*/).map(v => parseInt(v) || 0),\n            styles: !styles ? null : _.map(styles, s => {\n                const pair = _.trim(s).split(\"=\");\n                return { name: _.trim(pair[0]), extractor: _.trim(pair[1]) };\n            })\n        };\n    }\n\n    /**\n     * Searches the whole workbook for template pattern and constructs the templates for processing.\n     * @param {Function} cb The callback to be invoked on each templated, after they are sorted.\n     * @returns {undefined}\n     * @description The templates collected are sorted, based on the intra-template reference - if one template\n     * is referring another one, it'll appear _later_ in the returned array, than the referred template.\n     * This is the order the callback is being invoked on.\n     * @ignore\n     */\n    collectTemplates(cb) {\n        const allTemplates = [];\n    \n        this._access.forAllCells(cell => {\n            const template = this.parseTemplate(cell);\n            if (template)\n                allTemplates.push(template);\n        });\n        \n        return allTemplates\n            .sort((a, b) => a.reference == this._access.cellRef(b.cell) ? 1 : b.reference == this._access.cellRef(a.cell) ? -1 : 0)\n            .forEach(cb);\n    }\n\n    /**\n     * Extracts the value(s) from the provided data `root` to be set in the provided `cell`.\n     * @param {{}} root The data root to be extracted values from.\n     * @param {string} extractor The extraction string provided by the template. Usually a JSON path within the data `root`.\n     * @param {Cell} cell A reference cell, if such exists.\n     * @returns {string|Array|Array.<Array.<*>>} The value to be used.\n     * @description This method is used even when a whole - possibly rectangular - range is about to be set, so it can\n     * return an array of arrays.\n     * @ignore\n     */\n    extractValues(root, extractor, cell) {\n        const { path, handler } = this.parseExtractor(extractor);\n\n        if (!Array.isArray(root))\n            root = _.get(root, path, root);\n        else if (root.sizes !== undefined)\n            root = !extractor ? root : _.map(root, entry => this.extractValues(entry, extractor, cell));\n        else if (!handler)\n            return root.join(this._opts.joinText || \",\");\n\n        return !handler ? root : handler.call(this._opts, root, cell);\n    }\n\n    /**\n     * Extracts an array (possibly of arrays) with data for the given fill, based on the given\n     * root object.\n     * @param {{}} root The main reference object to apply iterators to.\n     * @param {Array} iterators List of iterators - string JSON paths inside the root object.\n     * @param {Number} idx The index in the iterators array to work on.\n     * @returns {Array|Array.<Array>} An array (possibly of arrays) with extracted data.\n     * @ignore\n     */\n    extractData(root, iterators, idx) {\n        let iter = iterators[idx],\n            sizes = [],\n            transposed = false,\n            data = null;\n\n        if (iter == '1') {\n            transposed = true;\n            iter = iterators[++idx];\n        }\n\n        if (!iter) return root;\n\n        // A specific extractor can be specified after semilon - find and remember it.\n        const parsedIter = this.parseExtractor(iter);\n\n        data = _.get(root, parsedIter.path, root);\n        \n        if (typeof parsedIter.handler === 'function')\n            data = parsedIter.handler.call(this._opts, data);\n\n        if (idx < iterators.length - 1) {\n            data = _.map(data, inRoot => this.extractData(inRoot, iterators, idx + 1));\n            sizes = data[0].sizes;\n        } else if (!Array.isArray(data) && typeof data === 'object')\n            data = _.values(data);\n\n        // Some data sanity checks.\n        if (!data)\n            throw new Error(`The iterator '${iter}' extracted no data!`);\n        else if (typeof data !== 'object')\n            throw new Error(`The data extracted from iterator '${iter}' is neither an array, nor object!`);\n\n        sizes.unshift(transposed ? -data.length : data.length);\n        data.sizes = sizes;\n        return data;\n    }\n\n    /**\n     * Put the data values into the proper cells, with correct extracted values.\n     * @param {{}} cell The starting cell for the data to be put.\n     * @param {Array} data The actual data to be put. The values will be _extracted_ from here first.\n     * @param {{}} template The template that is being implemented with that data fill.\n     * @returns {Array} Matrix size that this data has occupied on the sheet [rows, cols].\n     * @ignore\n     */\n    putValues(cell, data, template) {\n        let entrySize = data.sizes,\n            value = this.extractValues(data, template.extractor, cell);\n\n        // make sure, the \n        if (!entrySize || !entrySize.length) {\n            this._access\n                .setValue(cell, value)\n                .copyStyle(cell, template.cell)\n                .copySize(cell, template.cell);\n            this.applyDataStyle(cell, data, template);\n            entrySize = template.cellSize;\n        } else if (entrySize.length <= 2) {\n            // Normalize the size and data.\n            if (entrySize[0] < 0) {\n                entrySize = [1, -entrySize[0]];\n                value = [value];\n                data = [data];\n            } else if (entrySize.length == 1) {\n                entrySize = entrySize.concat([1]);\n                value = _.chunk(value, 1);\n                data = _.chunk(data, 1);\n            }\n\n            this._access.getCellRange(cell, entrySize[0] - 1, entrySize[1] - 1).forEach((cell, ri, ci) => {\n                this._access\n                    .setValue(cell, value[ri][ci])\n                    .copyStyle(cell, template.cell)\n                    .copySize(cell, template.cell);\n                this.applyDataStyle(cell, data[ri][ci], template);\n            });\n        } else {\n            // TODO: Deal with more than 3 dimensions case.\n            throw new Error(`Values extracted with '${template.extractor} are more than 2 dimension!'`);\n        }\n\n        return entrySize;\n    }\n\n    /**\n     * Apply the given filter onto the sheet - extracting the proper data, following dependent fills, etc.\n     * @param {{}} aFill The fill to be applied, as constructed in the {@link fillData} method.\n     * @param {{}} root The data root to be used for data extraction.\n     * @param {Cell} mainCell The starting cell for data placement procedure.\n     * @returns {Array} The size of the data put in [row, col] format.\n     * @ignore\n     */\n    applyFill(aFill, root, mainCell) {\n        const template = aFill.template,\n            theData = this.extractData(root, template.iterators, 0);\n\n        let entrySize = [1, 1];\n\n        if (!aFill.dependents || !aFill.dependents.length)\n            entrySize = this.putValues(mainCell, theData, template);\n        else {\n            let nextCell = mainCell;\n            const sizeMaxxer = (val, idx) => entrySize[idx] = Math.max(entrySize[idx], val);\n\n            for (let d = 0; d < theData.length; ++d) {\n                const inRoot = theData[d];\n\n                for (let f = 0; f < aFill.dependents.length; ++f) {\n                    const inFill = aFill.dependents[f],\n                        inCell = this._access.offsetCell(nextCell, inFill.offset[0], inFill.offset[1]),\n                        innerSize = this.applyFill(inFill, inRoot, inCell);\n\n                    _.forEach(innerSize, sizeMaxxer);\n                    inFill.processed = true;\n                }\n\n                // Now we have the inner data put and the size calculated.\n                _.forEach(this.putValues(nextCell, inRoot, template), sizeMaxxer);\n\n                let rowOffset = entrySize[0],\n                    colOffset = entrySize[1];\n\n                // Make sure we grow only on one dimension.\n                if (theData.sizes[0] < 0) {\n                    rowOffset = 0;\n                    entrySize[1] = 1;\n                } else {\n                    colOffset = 0;\n                    entrySize[0] = 1;\n                }\n\n                if (rowOffset > 1 || colOffset > 1) {\n                    const rng = this._access.getCellRange(nextCell, Math.max(rowOffset - 1, 0), Math.max(colOffset - 1, 0));\n                    this._access.setRangeMerged(rng, true);\n                    rng.forEach(cell => this._access.copySize(cell, template.cell));\n                }\n\n                // Finally, calculate the next cell.\n                nextCell = this._access.offsetCell(nextCell, rowOffset + (template.padding[0] || 0), colOffset + (template.padding[1] || 0));\t\n            }\n\n            // Now recalc combined entry size.\n            _.forEach(this._access.cellDistance(mainCell, nextCell), sizeMaxxer);\n        }\n\n        return entrySize;\n    }\n}\n\n/**\n * The built-in accessor based on xlsx-populate npm module\n * @type {XlsxPopulateAccess}\n */\nXlsxDataFill.XlsxPopulateAccess = require('./XlsxPopulateAccess');\n\nmodule.exports = XlsxDataFill;\n","\"use strict\";\n\nconst _ = require('lodash');\n\n// const allStyles = [\n//     \"bold\", \n//     \"italic\", \n//     \"underline\", \n//     \"strikethrough\", \n//     \"subscript\", \n//     \"superscript\", \n//     \"fontSize\", \n//     \"fontFamily\", \n//     \"fontGenericFamily\", \n//     \"fontScheme\", \n//     \"fontColor\", \n//     \"horizontalAlignment\", \n//     \"justifyLastLine\", \n//     \"indent\", \n//     \"verticalAlignment\", \n//     \"wrapText\", \n//     \"shrinkToFit\", \n//     \"textDirection\", \n//     \"textRotation\", \n//     \"angleTextCounterclockwise\", \n//     \"angleTextClockwise\", \n//     \"rotateTextUp\", \n//     \"rotateTextDown\", \n//     \"verticalText\", \n//     \"fill\", \n//     \"border\", \n//     \"borderColor\", \n//     \"borderStyle\", \n//     \"leftBorder\", \"rightBorder\", \"topBorder\", \"bottomBorder\", \"diagonalBorder\", \n//     \"leftBorderColor\", \"rightBorderColor\", \"topBorderColor\", \"bottomBorderColor\", \"diagonalBorderColor\", \n//     \"leftBorderStyle\", \"rightBorderStyle\", \"topBorderStyle\", \"bottomBorderStyle\", \"diagonalBorderStyle\", \n//     \"diagonalBorderDirection\", \n//     \"numberFormat\"\n// ];\n\nlet _RichText = null;\n\n/**\n * `xslx-populate` library based accessor to a given Excel workbook. All these methods are internally used by {@link XlsxDataFill}, \n * but can be used as a reference for implementing custom spreadsheet accessors.\n */\nclass XlsxPopulateAccess {\n    /**\n     * Constructs a new instance of XlsxSmartTemplate with given options.\n     * @param {Workbook} workbook - The workbook to be accessed.\n     * @param {XlsxPopulate} XlsxPopulate - The actual xlsx-populate library object.\n     * @description The `XlsxPopulate` object need to be passed in order to extract\n     * certain information from it, _without_ referring the whole library, thus\n     * avoiding making the `xlsx-datafill` package a dependency.\n     */\n    constructor(workbook, XlsxPopulate) {\n        this._workbook = workbook;\n        this._rowSizes = {};\n        this._colSizes = {};\n    \n        _RichText = XlsxPopulate.RichText;\n    }\n\n    /**\n     * Returns the configured workbook for direct XlsxPopulate manipulation.\n     * @returns {Workbook} The workbook involved.\n     */\n    workbook() {\n        return this._workbook; \n    }\n\n    /**\n     * Gets the textual representation of the cell value.\n     * @param {Cell} cell - The cell to retrieve the value from.\n     * @returns {string} The textual representation of cell's contents.\n     */\n    cellValue(cell) {\n        const theValue = cell.value();\n        return theValue instanceof _RichText ? theValue.text() : theValue;\n    }\n\n    /**\n     * Measures the distance, as a vector between two given cells.\n     * @param {Cell} from The first cell.\n     * @param {Cell} to The second cell.\n     * @returns {Array.<Number>} An array with two values [<rows>, <cols>], representing the distance between the two cells.\n     */\n    cellDistance(from, to) {\n        return [\n            to.rowNumber() - from.rowNumber(),\n            to.columnNumber() - from.columnNumber()\n        ];\n    }\n\n    /**\n     * Determines the size of cell, taking into account if it is part of a merged range.\n     * @param {Cell} cell The cell to be investigated.\n     * @returns {Array.<Number>} An array with two values [<rows>, <cols>], representing the occupied size.\n     */\n    cellSize(cell) {\n        const cellAddr = cell.address();\n        let theSize = [1, 1];\n    \n        _.forEach(cell.sheet()._mergeCells, range => {\n            const rangeAddr = range.attributes.ref.split(\":\");\n            if (rangeAddr[0] == cellAddr) {\n                theSize = this.cellDistance(cell, cell.sheet().cell(rangeAddr[1]));\n                ++theSize[0];\n                ++theSize[1];\n                return false;\n            }\n        });\n    \n        return theSize;\n    }\n\n    /**\n     * Creates a reference Id for a given cell, based on its sheet and address.\n     * @param {Cell} cell The cell to create a reference Id to.\n     * @returns {string} The id to be used as a reference for this cell.\n     */\n    cellRef(cell) {\n        return cell.address({ includeSheetName: true });\n    }\n\n    /**\n     * Build a reference string for a cell identified by @param adr, from the @param cell.\n     * @param {Cell} cell A cell that is a base of the reference.\n     * @param {string} adr The address of the target cell, as mentioned in @param cell.\n     * @returns {string} A reference string identifying the target cell uniquely.\n     */\n    buildRef(cell, adr) {\n        return adr ? cell.sheet().cell(adr).address({ includeSheetName: true }) : null;\n    }\n\n    /**\n     * Retrieves a given cell from a given sheet (or an active one).\n     * @param {string|object|array} address The cell adress to be used\n     * @param {string|idx} sheetId The id/name of the sheet to retrieve the cell from. Defaults to an active one.\n     * @returns {Cell} A reference to the required cell.\n     */\n    getCell(address, sheetId) {\n        const theSheet = sheetId == null ? this._workbook.activeSheet() : this._workbook.sheet(sheetId);\n        return theSheet.cell(address);\n    }\n\n    /**\n     * Constructs and returns the range starting from the given cell and spawning given rows and cells.\n     * @param {Cell} cell The starting cell of the range.\n     * @param {Number} rowOffset Number of rows away from the starting cell. 0 means same row.\n     * @param {Number} colOffset Number of columns away from the starting cell. 0 means same column.\n     * @returns {Range} The constructed range.\n     */\n    getCellRange(cell, rowOffset, colOffset) {\n        return cell.rangeTo(cell.relativeCell(rowOffset, colOffset));\n    }\n\n    /**\n     * Gets the cell at a certain offset from a given one.\n     * @param {Cell} cell The reference cell to make the offset from.\n     * @param {int} rows Number of rows to offset.\n     * @param {int} cols Number of columns to offset.\n     * @returns {Cell} The resulting cell.\n     */\n    offsetCell(cell, rows, cols) {\n        return cell.relativeCell(rows, cols);\n    }\n\n    /**\n     * Merge or split range of cells.\n     * @param {Range} range The range, as returned from {@link getCellRange}\n     * @param {boolean} status The merged status to be set.\n     * @returns {XlsxPopulateAccess} For chain invokes.\n     */\n    setRangeMerged(range, status) {\n        range.merged(status);\n        return this;\n    }\n\n    /**\n     * Iterate over all used cells of the given workbook.\n     * @param {function} cb The callback to be invoked with `cell` argument for each used cell.\n     * @returns {XlsxPopulateAccess} For chain invokes.\n     */\n    forAllCells(cb) {\n        this._workbook.sheets().forEach(sheet => sheet.usedRange().forEach(cb));\n        return this;\n    }\n\n    /**\n     * Copies the styles from `src` cell to the `dest`-ination one.\n     * @param {Cell} dest Destination cell.\n     * @param {Cell} src Source cell.\n     * @returns {XlsxPopulateAccess} For invocation chaining.\n     */\n    copyStyle(dest, src) {\n        if (src == dest) return this;\n\n        if (src._style !== undefined)\n            dest.style(src._style);\n        else if (src._styleId > 0)\n            dest._styleId = src._styleId;\n        \n        return this;\n    }\n\n    /**\n     * Resize the column and row of the destination cell, if not changed already.\n     * @param {Cell} dest The destination cell which row and column to resize.\n     * @param {Cell} src The source (template) cell to take the size from.\n     * @returns {XlsxPopulateAccess} For invocation chaining.\n     */\n    copySize(dest, src) {\n        const row = dest.rowNumber(),\n            col = dest.columnNumber();\n\n        if (this._rowSizes[row] === undefined)\n            dest.row().height(this._rowSizes[row] = src.row().height());\n        \n        if (this._colSizes[col] === undefined)\n            dest.column().width(this._colSizes[col] = src.column().width());\n\n        return this;\n    }\n\n    /**\n     * Sets a value in the cell.\n     * @param {Cell} cell The cell to be operated.\n     * @param {string} value The string value to be set inside.\n     * @returns {XlsxPopulateAccess} For invocation chaining.\n     */\n    setValue(cell, value) {\n        cell.value(value);\n        return this;\n    }\n\n    /**\n     * Sets a named style of a given cell.\n     * @param {Cell} cell The cell to be operated.\n     * @param {string} name The name of the style property to be set.\n     * @param {string|object} value The value for this property to be set.\n     * @returns {XlsxPopulateAccess} For invocation chaining.\n     */\n    setStyle(cell, name, value) {\n        cell.style(name, value);\n        return this;\n    }\n}\n\nmodule.exports = XlsxPopulateAccess;\n"]}