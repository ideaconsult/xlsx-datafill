{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/XlsxDataFill.js","src/XlsxPopulateAccess.js"],"names":["f","exports","module","define","amd","window","global","self","this","XlsxDataFill","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","_2","defaultOpts","templateRegExp","RegExp","fieldSplitter","joinText","callbacksMap","","data","keys","accessor","opts","_classCallCheck","_opts","defaultsDeep","_rowSizes","_colSizes","_access","newOpts","merge","options","extractor","extractParts","split","path","handler","cell","template","_this","styles","each","pair","startsWith","name","substr","val","extractValues","setStyle","reMatch","cellTextValue","match","parts","map","trim","iters","reference","iterators","cellSize","padding","v","parseInt","s","cb","_this2","allTemplates","forAllCells","parseTemplate","push","sort","b","address","forEach","root","_this3","_this$parseExtractor","parseExtractor","Array","isArray","undefined","sizes","entry","join","get","idx","_this4","iter","transposed","parsedIter","inRoot","extractData","_typeof","values","unshift","_this5","entrySize","value","concat","chunk","getCellRange","ri","ci","setValue","copyStyle","copySize","applyDataStyle","aFill","mainCell","_this6","theData","dependents","nextCell","sizeMaxxer","Math","max","d","inFill","inCell","relativeCell","offset","innerSize","applyFill","processed","putValues","rowOffset","colOffset","rng","setRangeMerged","cellDistance","_this7","dataFills","collectTemplates","refFill","fill","XlsxPopulateAccess","_","_RichText","workbook","XlsxPopulate","_workbook","RichText","cellValue","text","from","to","rowNumber","columnNumber","cellAddr","theSize","sheet","_mergeCells","range","rangeAddr","attributes","ref","sheetId","activeSheet","rangeTo","status","merged","sheets","usedRange","dest","src","_styleId","_style","row","col","height","column","width","style"],"mappings":"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","file":"xlsx-datafill.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\"use strict\";\n\nconst _ = require('lodash');\nconst defaultOpts = {\n    templateRegExp: new RegExp(/\\{\\{([^}]*)\\}\\}/),\n    fieldSplitter: \"|\",\n    joinText: \",\",\n    callbacksMap: {\n        \"\": data => _.keys(data)\n    }\n};\n\n/**\n * Data fill engine.\n */\nclass XlsxDataFill {\n    /**\n     * Constructs a new instance of XlsxDataFill with given options.\n     * @param {object} accessor An instance of XLSX data accessing class.\n     * @param {{}} opts Options to be used during processing.\n     * @param {RegExp} opts.templateRegExp The regular expression to be used for template parsing.\n     * @param {string} opts.fieldSplitter The string to be expected as template field splitter.\n     * @param {string} opts.joinText The string to be used when extracting array values.\n     * @param {object.<string, function>} opts.callbacksMap A map of handlers to be used for data extraction.\n     */\n    constructor(accessor, opts) {\n        this._opts = _.defaultsDeep({}, opts, defaultOpts);\n        this._rowSizes = {};\n        this._colSizes = {};\n        this._access = accessor;\n    }\n\n    /**\n     * Setter/getter for XlsxDataFill's options as set during construction.\n     * @param {{}|null} newOpts If set - the news options to be used.\n     * @returns {XlsxDataFill|{}} The required options or XlsxDataFill (in set mode) for chaining.\n     */\n    options(newOpts) {\n        if (newOpts !== null) {\n            _.merge(this._opts, newOpts);\n            this._access.options(this._opts);\n            return this;\n        } else\n            return this._opts;\n    }\n\n    /**\n     * Parses the provided extractor (ot iterator) string to find a callback id inside, if present.\n     * @param {string} extractor The iterator/extractor string to be investigated.\n     * @returns {object.<string, function>} A { `path`, `handler` } object representing the JSON path\n     * ready for use and the provided `handler` _function_ - ready for invoking, if such is provided.\n     * If not - the `path` property contains the provided `extractor`, and the `handler` is `null`.\n     */\n    parseExtractor(extractor) {\n        // A specific extractor can be specified after semilon - find and remember it.\n        const extractParts = extractor.split(\":\");\n\n        return extractParts.length == 1\n            ? { path: extractor, handler: null }\n            : {\n                path: extractParts[0],\n                handler: this._opts.callbacksMap[extractParts[1]]\n            };\n    }\n\n    /**\n     * Applies the style part of the template onto a given cell.\n     * @param {Cell} cell The destination cell to apply styling to.\n     * @param {{}} data The data chunk for that cell.\n     * @param {{}} template The template to be used for that cell.\n     * @returns {DataFiller} For invocation chaining.\n     */\n    applyDataStyle(cell, data, template) {\n        const styles = template.styles;\n        \n        if (styles && data) {\n            _.each(styles, pair => {\n                if (_.startsWith(pair.name, \":\")) {\n                    const handler = this._opts.callbacksMap[pair.name.substr(1)];\n                    if (typeof handler === 'function')\n                        handler(data, cell, this._opts);\n                } else {\n                    const val = this.extractValues(data, pair.extractor);\n                    if (val)\n                        this._access.setStyle(cell, pair.name, val);\n                }\n            });\n        }\n\n        return this;\n    }\n\n\n    /**\n     * Parses the contents of the cell into a valid template info.\n     * @param {Cell} cell The cell containing the template to be parsed.\n     * @returns {{}} The parsed template.\n     * @description This method builds template info, taking into account the supplied options.\n     */\n    parseTemplate(cell) {\n        // The options are in `this` argument.\n        const reMatch = (this._access.cellTextValue(cell) || '').match(this._opts.templateRegExp);\n        \n        if (!reMatch) return null;\n    \n        const parts = reMatch[1].split(this._opts.fieldSplitter).map(_.trim),\n            iters = parts[1].split(/x|\\*/).map(_.trim),\n            styles = !parts[4] ? null : parts[4].split(\",\");\n    \n        return {\n            reference: _.trim(parts[0]),\n            iterators: iters,\n            extractor: parts[2] || \"\",\n            cell: cell,\n            cellSize: this._access.cellSize(cell),\n            padding: (parts[3] || \"\").split(/:|,|x|\\*/).map(v => parseInt(v) || 0),\n            styles: !styles ? null : _.map(styles, s => {\n                const pair = _.trim(s).split(\"=\");\n                return { name: _.trim(pair[0]), extractor: _.trim(pair[1]) };\n            })\n        };\n    }\n\n    /**\n     * Searches the whole workbook for template pattern and constructs the templates for processing.\n     * @param {Function} cb The callback to be invoked on each templated, after they are sorted.\n     * @returns {undefined}\n     * @description The templates collected are sorted, based on the intra-template reference - if one template\n     * is referring another one, it'll appear _later_ in the returned array, than the referred template.\n     * This is the order the callback is being invoked on.\n     */\n    collectTemplates(cb) {\n        const allTemplates = [];\n    \n        this._access.forAllCells(cell => {\n            const template = this.parseTemplate(cell);\n            if (template)\n                allTemplates.push(template);\n        });\n        \n        return allTemplates\n            .sort((a, b) => a.reference == b.cell.address() ? 1 : b.reference == a.cell.address() ? -1 : 0)\n            .forEach(cb);\n    }\n\n    /**\n     * Extracts the value(s) from the provided data `root` to be set in the provided `cell`.\n     * @param {{}} root The data root to be extracted values from.\n     * @param {string} extractor The extraction string provided by the template. Usually a JSON path within the data `root`.\n     * @returns {string|Array|Array.<Array.<*>>} The value to be used.\n     * @description This method is used even when a whole - possibly rectangular - range is about to be set, so it can\n     * return an array of arrays.\n     */\n    extractValues(root, extractor) {\n        const { path, handler } = this.parseExtractor(extractor);\n\n        if (!Array.isArray(root))\n            root = _.get(root, path, root);\n        else if (root.sizes !== undefined)\n            root = !extractor ? root : _.map(root, entry => this.extractValues(entry, extractor));\n        else if (!handler)\n            return root.join(this._opts.joinText || \",\");\n\n        return !handler ? root : handler(root, null, this._opts);            \n    }\n\n    /**\n     * Extracts an array (possibly of arrays) with data for the given fill, based on the given\n     * root object.\n     * @param {{}} root The main reference object to apply iterators to.\n     * @param {Array} iterators List of iterators - string JSON paths inside the root object.\n     * @param {Number} idx The index in the iterators array to work on.\n     * @returns {Array|Array.<Array>} An array (possibly of arrays) with extracted data.\n     */\n    extractData(root, iterators, idx) {\n        let iter = iterators[idx],\n            sizes = [],\n            transposed = false,\n            data = null;\n\n        if (iter == '1') {\n            transposed = true;\n            iter = iterators[++idx];\n        }\n\n        if (!iter) return root;\n\n        // A specific extractor can be specified after semilon - find and remember it.\n        const parsedIter = this.parseExtractor(iter);\n\n        data = _.get(root, parsedIter.path, root);\n        \n        if (typeof parsedIter.handler === 'function')\n            data = parsedIter.handler.call(null, data, null, this._opts);\n\n        if (idx < iterators.length - 1) {\n            data = _.map(data, inRoot => this.extractData(inRoot, iterators, idx + 1));\n            sizes = data[0].sizes;\n        } else if (!Array.isArray(data) && typeof data === 'object')\n            data = _.values(data);\n\n        sizes.unshift(transposed ? -data.length : data.length);\n        data.sizes = sizes;\n        return data;\n    }\n\n    /**\n     * Put the data values into the proper cells, with correct extracted values.\n     * \n     * @param {{}} cell The starting cell for the data to be put.\n     * @param {Array} data The actual data to be put. The values will be _extracted_ from here first.\n     * @param {{}} template The template that is being implemented with that data fill.\n     * @returns {Array} Matrix size that this data has occupied on the sheet [rows, cols].\n     */\n    putValues(cell, data, template) {\n        let entrySize = data.sizes,\n            value = this.extractValues(data, template.extractor);\n\n        // make sure, the \n        if (!entrySize || !entrySize.length) {\n            this._access\n                .setValue(cell, value)\n                .copyStyle(cell, template.cell)\n                .copySize(cell, template.cell);\n            this.applyDataStyle(cell, data, template);\n            entrySize = template.cellSize;\n        } else if (entrySize.length <= 2) {\n            // Normalize the size and data.\n            if (entrySize[0] < 0) {\n                entrySize = [1, -entrySize[0]];\n                value = [value];\n            } else if (entrySize.length == 1) {\n                entrySize = entrySize.concat([1]);\n                value = _.chunk(value, 1);\n            }\n\n            this._access.getCellRange(cell, entrySize[0] - 1, entrySize[1] - 1).forEach((cell, ri, ci) => {\n                this._access\n                    .setValue(cell, value[ri][ci])\n                    .copyStyle(cell, template.cell)\n                    .copySize(cell, template.cell);\n                this.applyDataStyle(cell, data[ri][ci], template);\n            });\n        } else {\n            // TODO: Deal with more than 3 dimensions case.\n        }\n\n        return entrySize;\n    }\n\n    /**\n     * Apply the given filter onto the sheet - extracting the proper data, following dependent fills, etc.\n     * @param {{}} aFill The fill to be applied, as constructed in the @see populate methods.\n     * @param {{}} root The data root to be used for data extraction.\n     * @param {Cell} mainCell The starting cell for data placement procedure.\n     * @returns {Array} The size of the data put in [row, col] format.\n     */\n    applyFill(aFill, root, mainCell) {\n        const template = aFill.template,\n            theData = this.extractData(root, template.iterators, 0);\n\n        let entrySize = [1, 1];\n\n        if (!aFill.dependents || !aFill.dependents.length)\n            entrySize = this.putValues(mainCell, theData, template);\n        else {\n            let nextCell = mainCell;\n            const sizeMaxxer = (val, idx) => entrySize[idx] = Math.max(entrySize[idx], val);\n\n            for (let d = 0; d < theData.length; ++d) {\n                const inRoot = theData[d];\n\n                for (let f = 0; f < aFill.dependents.length; ++f) {\n                    const inFill = aFill.dependents[f],\n                        inCell = nextCell.relativeCell(inFill.offset[0], inFill.offset[1]),\n                        innerSize = this.applyFill(inFill, inRoot, inCell);\n\n                    _.forEach(innerSize, sizeMaxxer);\n                    inFill.processed = true;\n                }\n\n                // Now we have the inner data put and the size calculated.\n                _.forEach(this.putValues(nextCell, inRoot, template), sizeMaxxer);\n\n                let rowOffset = entrySize[0],\n                    colOffset = entrySize[1];\n\n                // Make sure we grow only on one dimension.\n                if (theData.sizes[0] < 0) {\n                    rowOffset = 0;\n                    entrySize[1] = 1;\n                } else {\n                    colOffset = 0;\n                    entrySize[0] = 1;\n                }\n\n                if (rowOffset > 1 || colOffset > 1) {\n                    const rng = this._access.getCellRange(nextCell, Math.max(rowOffset - 1, 0), Math.max(colOffset - 1, 0));\n                    this._access.setRangeMerged(rng, true);\n                    rng.forEach(cell => this._access.copySize(cell, template.cell));\n                }\n\n                // Finally, calculate the next cell.\n                nextCell = nextCell.relativeCell(rowOffset + template.padding[0], colOffset + template.padding[1] || 0);\t\n            }\n\n            // Now recalc combined entry size.\n            _.forEach(this._access.cellDistance(mainCell, nextCell), sizeMaxxer);\n        }\n\n        return entrySize;\n    }\n\n    /**\n     * The main entry point for whole data population mechanism.\n     * @param {{}} data The data to be applied.\n     * @returns {XlsxDataFill} For invocation chaining.\n     */\n    fillData(data) {\n        const dataFills = {};\n\t\n        // Build the dependency connections between templates.\n        this.collectTemplates(template => {\n            const aFill = {  \n                template: template, \n                dependents: [],\n                processed: false\n            };\n    \n            if (template.reference) {\n                const refFill = dataFills[template.reference];\n                \n                refFill.dependents.push(aFill);\n                aFill.offset = this._access.cellDistance(refFill.template.cell, template.cell);\n            }\n    \n            dataFills[template.cell.address()] = aFill;\n        });\n    \n        // Apply each fill onto the sheet.\n        _.each(dataFills, fill => {\n            if (!fill.processed)\n                this.applyFill(fill, data, fill.template.cell);\n        });\n\n        return this;\n    }\n}\n\n/**\n * The built-in accessor based on xlsx-populate npm module\n * @type {XlsxPopulateAccess}\n */\nXlsxDataFill.XlsxPopulateAccess = require('./XlsxPopulateAccess');\n\nmodule.exports = XlsxDataFill;\n","\"use strict\";\n\nconst _ = require('lodash');\n\nlet _RichText = null;\n\n// const XlsxPopulate = require('xlsx-populate');\n\n/**\n * Data fill routines wrapper.\n * @ignore\n */\nclass XlsxPopulateAccess {\n    /**\n     * Constructs a new instance of XlsxSmartTemplate with given options.\n     * @param {Workbook} workbook - The workbook to be accessed.\n     * @param {XlsxPopulate} XlsxPopulate - The actual xlsx-populate library object.\n     * @description The `XlsxPopulate` object need to be passed in order to extract\n     * certain information from it, _without_ referring the whole library, and thus\n     * making the `xlsx-datafill` package dependent on it.\n     */\n    constructor(workbook, XlsxPopulate) {\n        this._workbook = workbook;\n        this._rowSizes = {};\n        this._colSizes = {};\n    \n        _RichText = XlsxPopulate.RichText;\n    }\n\n    /**\n     * Returns the configured workbook for direct XlsxPopulate manipulation.\n     * @returns {Workbook} The workbook involved.\n     */\n    workbook() {\n        return this._workbook; \n    }\n\n    /**\n     * Gets the textual representation of the cell value.\n     * @param {Cell} cell - The cell to retrieve the value from.\n     * @returns {string} The textual representation of cell's contents.\n     */\n    cellTextValue(cell) {\n        const cellValue = cell.value();\n        return cellValue instanceof _RichText ? cellValue.text() : cellValue;\n    }\n\n    /**\n     * Measures the distance, as a vector between two given cells.\n     * @param {Cell} from The first cell.\n     * @param {Cell} to The second cell.\n     * @returns {Array.<Number>} An array with two values [<rows>, <cols>], representing the distance between the two cells.\n     */\n    cellDistance(from, to) {\n        return [\n            to.rowNumber() - from.rowNumber(),\n            to.columnNumber() - from.columnNumber()\n        ];\n    }\n\n    /**\n     * Determines the size of cell, taking into account if it is part of a merged range.\n     * @param {Cell} cell The cell to be investigated.\n     * @returns {Array.<Number>} An array with two values [<rows>, <cols>], representing the occupied size.\n     */\n    cellSize(cell) {\n        const cellAddr = cell.address();\n        let theSize = [1, 1];\n    \n        _.forEach(cell.sheet()._mergeCells, range => {\n            const rangeAddr = range.attributes.ref.split(\":\");\n            if (rangeAddr[0] == cellAddr) {\n                theSize = this.cellDistance(cell, cell.sheet().cell(rangeAddr[1]));\n                ++theSize[0];\n                ++theSize[1];\n                return false;\n            }\n        });\n    \n        return theSize;\n    }\n\n    /**\n     * Retrieves a given cell from a given sheet (or an active one).\n     * @param {string|object|array} address The cell adress to be used\n     * @param {string|idx} sheetId The id/name of the sheet to retrieve the cell from. Defaults to an active one.\n     * @returns {Cell} A reference to the required cell.\n     */\n    getCell(address, sheetId) {\n        const theSheet = sheetId == null ? this._workbook.activeSheet() : this._workbook.sheet(sheetId);\n        return theSheet.cell(address);\n    }\n\n    /**\n     * Constructs and returns the range starting from the given cell and spawning given rows and cells.\n     * @param {Cell} cell The starting cell of the range.\n     * @param {Number} rowOffset Number of rows away from the starting cell. 0 means same row.\n     * @param {Number} colOffset Number of columns away from the starting cell. 0 means same column.\n     * @returns {Range} The constructed range.\n     */\n    getCellRange(cell, rowOffset, colOffset) {\n        return cell.rangeTo(cell.relativeCell(rowOffset, colOffset));\n    }\n\n    /**\n     * Merge or split range of cells.\n     * @param {Range} range The range, as returned from @see getCellRange().\n     * @param {boolean} status The merged status to be set.\n     * @returns {XlsxPopulateAccess} For chain invokes.\n     */\n    setRangeMerged(range, status) {\n        range.merged(status);\n        return this;\n    }\n\n    /**\n     * Iterate over all used cells of the given workbook.\n     * @param {function} cb The callback to be invoked with `cell` argument for each used cell.\n     * @returns {XlsxPopulateAccess} For chain invokes.\n     */\n    forAllCells(cb) {\n        this._workbook.sheets().forEach(sheet => sheet.usedRange().forEach(cb));\n        return this;\n    }\n\n    /**\n     * Copies the styles from `src` cell to the `dest`-ination one.\n     * @param {Cell} dest Destination cell.\n     * @param {Cell} src Source cell.\n     * @returns {XlsxPopulateAccess} For invocation chaining.\n     */\n    copyStyle(dest, src) {\n        if (src == dest) return this;\n        \n        dest._styleId = src._styleId;\n        if (src._style)\n            dest._style = _.merge({}, src._style);\n        \n        return this;\n    }\n\n    /**\n     * Resize the column and row of the destination cell, if not changed already.\n     * @param {Cell} dest The destination cell which row and column to resize.\n     * @param {Cell} src The source (template) cell to take the size from.\n     * @returns {XlsxPopulateAccess} For invocation chaining.\n     */\n    copySize(dest, src) {\n        const row = dest.rowNumber(),\n            col = dest.columnNumber();\n\n        if (this._rowSizes[row] === undefined)\n            dest.row().height(this._rowSizes[row] = src.row().height());\n        \n        if (this._colSizes[col] === undefined)\n            dest.column().width(this._colSizes[col] = src.column().width());\n\n        return this;\n    }\n\n    /**\n     * Sets a value in the cell.\n     * @param {Cell} cell The cell to be operated.\n     * @param {string} value The string value to be set inside.\n     * @returns {XlsxPopulateAccess} For invocation chaining.\n     */\n    setValue(cell, value) {\n        cell.value(value);\n        return this;\n    }\n\n    /**\n     * Sets a named style of a given cell.\n     * @param {Cell} cell The cell to be operated.\n     * @param {string} name The name of the style property to be set.\n     * @param {string|object} value The value for this property to be set.\n     * @returns {XlsxPopulateAccess} For invocation chaining.\n     */\n    setStyle(cell, name, value) {\n        cell.style(name, value);\n        return this;\n    }\n}\n\nmodule.exports = XlsxPopulateAccess;\n"]}